<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.AppBuilder</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>AppBuilder adds various application files to a scoped app.</description>
        <name>AppBuilder</name>
        <script><![CDATA[function AppBuilder(strAppSysIdOrScopeName, strAppMenuSysId)
{
	function Log(strText)
	{
		x_snc_devtools.Log('DevTools AppBuilder: '+strText);
	}
		
	var strAppSysId = '';
	var strAppScope = '';
	var grApp = false;
	
	if (IsValidSysId(strAppSysIdOrScopeName) == false)
	{
		strAppScope = strAppSysIdOrScopeName;
		grApp = new GlideRecord('sys_app');
		grApp.addQuery('scope','=',strAppSysIdOrScopeName);
		grApp.query();
		if (grApp.getRowCount() != 1)
		{
			Log('Error: App not found with scope name: '+strAppScope);
			return false;
		}
		grApp.next();
		strAppSysId = grApp.sys_id; 
	}
	else
	{
		strAppSysId = strAppSysIdOrScopeName;
		grApp = GetRecord('sys_app',strAppSysId);
		if (grApp == false)
		{
			Log('Error: App not found with sys_id: '+strAppSysId);
			return false;
		}
		strAppScope = GetStringValue(grApp.scope);
	}
	
	if (strAppScope == 'x_snc_devtools')
	{
		Log('Error: Do not use AppBuilder() on DevTools itself!');
		return false;
	}
	
	var strAppName = GetAppName(strAppSysId);
	
	Log('Working on app "'+strAppName+'" ('+strAppScope+')');
	
	var grAppDevTools = GetRecord('sys_app','d689f6901bd38450a89720a8ec4bcbfd');
	var strDevToolsVersion = '';
	if (grAppDevTools != false)
	{
		strDevToolsVersion = GetStringValue(grAppDevTools.version);
	}
	
	// Adding the "active" system property
	var grSP = new GlideRecord('sys_properties');
	grSP.addQuery('sys_scope','=',strAppSysId);
	grSP.addQuery('name','=',strAppScope+'.active');
	grSP.query();
	if (grSP.next() == false)
	{
		Log('Adding system property "active"');
		var grSP = new GlideRecord('sys_properties');
		grSP.initialize();
		grSP.suffix = 'active';
		grSP.name = strAppScope+'.active';
		grSP.description = 'Controls if the '+strAppName+' application is active.';
		grSP.sys_scope = strAppSysId;
		grSP.type = 'boolean';
		grSP.value = 'true';
		GlideRecordInsert(grSP);
	}
	
	// Adding the "log.active" system property
	var grSP = new GlideRecord('sys_properties');
	grSP.addQuery('sys_scope','=',strAppSysId);
	grSP.addQuery('name','=',strAppScope+'.log.active');
	grSP.query();
	if (grSP.next() == false)
	{
		Log('Adding system property "log.active"');
		var grSP = new GlideRecord('sys_properties');
		grSP.initialize();
		grSP.suffix = 'log.active';
		grSP.name = strAppScope+'.log.active';
		grSP.description = 'Controls if the '+strAppName+' application produces log output.';
		grSP.sys_scope = strAppSysId;
		grSP.type = 'boolean';
		grSP.value = 'true';
		GlideRecordInsert(grSP);
	}	

	// Adding script include "IsActive"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','IsActive');
	grSSI.query();
	if (grSSI.next() == false)
	{
		Log('Adding script include "IsActive"');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'IsActive';
		grSSI.description = "Returns if the application is active.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function IsActive()\n"
			+"{\n"
			+"\treturn x_snc_devtools.GetBoolValue(gs.getProperty('"+strAppScope+".active'));\n"
			+"}";
		GlideRecordInsert(grSSI);
	}
								
								
	// Adding script include "Log"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','Log');
	grSSI.query();
	if (grSSI.next() == false)
	{
		Log('Adding script include "Log"');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'Log';
		grSSI.description = "Produces a log output in the application log.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function Log(strText)\n"
			+"{\n"
			+"\tvar GetBoolValue = x_snc_devtools.GetBoolValue;\n"
			+"\t\n"
			+"\tif (GetBoolValue(AppGetProperty('log.active')))\n"
			+"\t{\n"
			+"\t\tx_snc_devtools.Log('"+strAppName+": '+gs.getUserName()+': '+strText);\n"
			+"\t}\n"
			+"}";
		GlideRecordInsert(grSSI);
	}
	
	// Adding script include "Debug"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','Debug');
	grSSI.query();
	if (grSSI.next() == false)
	{
		Log('Adding script include "Debug"');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'Debug';
		grSSI.description = "Produces a log output in the application log using the DevTools Debug function.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function Debug(strText)\n"
			+"{\n"
			+"\tx_snc_devtools.Debug('"+strAppName+": '+gs.getUserName()+': '+strText);\n"
			+"}";
		GlideRecordInsert(grSSI);
	}	
	

	// Adding script include "AppGetProperty"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','AppGetProperty');
	grSSI.query();
	if (grSSI.next() == false)
	{
		Log('Adding script include "AppGetProperty"');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'AppGetProperty';
		grSSI.description = "Gets a system property of this application.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function AppGetProperty(strSuffix)\n"
			+"{\n"
			+"\tvar strName = '"+strAppScope+".'+strSuffix;\n"
			+"\treturn gs.getProperty(strName);\n"
			+"}\n";
		GlideRecordInsert(grSSI);
	}	
	
	
	// Adding script include "AppSetProperty"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','AppSetProperty');
	grSSI.query();
	if (grSSI.next() == false)
	{
		Log('Adding script include "AppSetProperty"');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'AppSetProperty';
		grSSI.description = "Sets a system property of this application.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function AppSetProperty(strSuffix,vValue)\n"
			+"{\n"
			+"\tvar strName = '"+strAppScope+".'+strSuffix;\n"
			+"\tif (IsProperty(strName) == false)\n"
			+"\t{\n"
			+"\t\treturn false;\n"
			+"\t}\n"
			+"\tgs.setProperty(strName,vValue);\n"
			+"\treturn true;\n"
			+"}\n";
		GlideRecordInsert(grSSI);
	}	
	
	
	// Adding script include "AppGetDependencies"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','AppGetDependencies');
	grSSI.query();
	if (grSSI.next() == false)
	{
		Log('Adding script include "AppGetDependencies"');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'AppGetDependencies';
		grSSI.description = "Retrieves information about the app's dependencies to other apps and required versions.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function AppGetDependencies()\n"
			+"{\n"
			+"\treturn [\n"
			+"\t\t{\n"
			+"\t\t\tname: 'DevTools',\n"
			+"\t\t\tversion: '"+strDevToolsVersion+"',\n"
			+"\t\t\turl: 'https://github.com/saschawildgrube/servicenow-devtools/',\n"
			+"\t\t\twebsite_url: 'https://www.wildgrube.com/servicenow-devtools'\n"
			+"\t\t}\n"
			+"\t];\n"
			+"}";
		GlideRecordInsert(grSSI);
	}

	
	// Adding script include "AppSetDefaults"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','AppSetDefaults');
	grSSI.query();
	if (grSSI.next() == false)
	{
		Log('Adding script include "AppSetDefaults"');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'AppSetDefaults';
		grSSI.description = "Sets all system properties to default values.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function AppSetDefaults()\n"
			+"{\n"
			+"\tAppSetProperty('active','true');\n"
			+"\tAppSetProperty('log.active','true');\n"
			+"}\n";
		GlideRecordInsert(grSSI);
	}	
	
	
	// Adding script include "AppInstall"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','AppInstall');
	grSSI.query();
	if (grSSI.next() == false)
	{
		Log('Adding script include "AppInstall"');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'AppInstall';
		grSSI.description = 'This script installs '+strAppName+'.';
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function AppInstall()\n"
			+"{\n"
			+"\tvar installer = new InstallerAPI();\n"
			+"\t\n"
			+"\t// Add your code here...\n"
			+"\t\n"
			+"\treturn installer.Finish();\n"
			+"}\n";
		GlideRecordInsert(grSSI);
	}		
	
	
	
	// Adding script include "DevTools" which implements the extension point
	var strDevToolsScriptInclude = false;
	var strScript = RecordGetValue('sys_extension_point','e3a183be1bae7010edf3642aab4bcbdc','example');
	strScript = strScript.replaceAll('x_this_app_scope',strAppScope);
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevTools');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevTools" already exists. Updating it...');
		grSSI.next();
		grSSI.script = strScript;
		GlideRecordUpdate(grSSI);
		strDevToolsScriptInclude = grSSI.sys_id;
	}
	else
	{
		Log('Adding script include "DevTools"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevTools';
		grSSI.description = "Implements the extension point for DevTools.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script = strScript;
		strDevToolsScriptInclude = GlideRecordInsert(grSSI);
	}
	Log('Script include "DevTools": '+RenderValue(strDevToolsScriptInclude));

	// Adding extension point instance
	var strEPI = false;
	var grEPI = new GlideRecord('sys_extension_instance');
	grEPI.addQuery('sys_scope','=',strAppSysId);
	grEPI.addQuery('point','=','x_snc_devtools.DevTools');
	grEPI.query();
	if (grEPI.getRowCount() != 0)
	{
		grEPI.next();
		Log('Extension point instance for "DevTools" already exists: '+grEPI.sys_id);
	}
	else
	{
		Log('Adding extension point instance for "DevTools"...');
		var grEPI = new GlideRecord('sys_extension_instance');
		grEPI.initialize();
		grEPI.active = true;
		grEPI.point = 'x_snc_devtools.DevTools';
		grEPI.sys_scope = strAppSysId;
		grEPI.script_include = strDevToolsScriptInclude;
		grEPI.order = 100;
		strEPI = GlideRecordInsert(grEPI);
		Log('Adding extension point instance for "DevTools": '+RenderValue(strEPI));
	}
	
	
	
	// Adding script include "DevToolsGetParentRecord"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevToolsGetParentRecord');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevToolsGetParentRecord" already exists...');
	}
	else
	{
		Log('Adding script include "DevToolsGetParentRecord"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevToolsGetParentRecord';
		grSSI.description = "The DevToolsGetParentRecord function is called by the DevTools extension point instance class and returns a parent record for the given record if it can be determined.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script = ""
			+"function DevToolsGetParentRecord(grRecord)\n"
			+"{\n"
			+"\tvar GetRecord = x_snc_devtools.GetRecord;\n"
			+"\tvar strTable = grRecord.getRecordClassName();\n"
			+"\n"
			+"\tif (strTable == 'incident_task')\n"
			+"\t{\n"
			+"\t\treturn GetRecord('incident',grRecord.incident);\n"
			+"\t}\n"
			+"\n"
			+"\treturn false;\n"
			+"}";
		strSSI = GlideRecordInsert(grSSI);
		Log('Script include "DevToolsGetParentRecord": '+RenderValue(strSSI));	
	}	
	

	// Adding script include "DevToolsGetLinkDirectory"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevToolsGetLinkDirectory');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevToolsGetLinkDirectory" already exists...');
	}
	else
	{
		Log('Adding script include "DevToolsGetLinkDirectory"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevToolsGetLinkDirectory';
		grSSI.description = "The DevToolsGetLinkDirectory function is called by the DevTools extension point instance class and returns an extended (or modified) link directory object that serves as the basis for the DevTools Link page.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script = ""
			+"function DevToolsGetLinkDirectory(linkdirectory)\n"
			+"{\n"
			+"\tlinkdirectory['Test Category'] =\n"
			+"\t[\n"
			+"\t\t{\n"
			+"\t\t\ttable: 'x_snc_devtools_test'\n"
			+"\t\t}\n"
			+"\t];\n"
			+"\n"
			+"\treturn linkdirectory;\n"
			+"}";
		strSSI = GlideRecordInsert(grSSI);
		Log('Script include "DevToolsGetLinkDirectory": '+RenderValue(strSSI));	
	}	
		
	
	
	
/*	
	// Adding module "Options"
	var grSAM = new GlideRecord('sys_app_module');
	grSAM.addQuery('sys_scope','=',strAppSysId);
	grSAM.addQuery('title','CONTAINS','Options');
	grSAM.query();
	if (grSAM.next() == false)
	{
		Log('Adding module "Options"');
		var grSAM = new GlideRecord('sys_app_module');
		grSAM.initialize();
		grSAM.title = 'Options';
		grSAM.sys_scope = strAppSysId;
		grSAM.link_type = 'DIRECT';
		//grSAM.query = "system_properties_ui.do?sysparm_title=DevTools%20Options&sysparm_category=devtools";
		GlideRecordInsert(grSAM);
	}	
*/	
	

	
	strAppMenuSysId = GetStringValue(strAppMenuSysId);
	var grAppMenu = false;
	if (IsValidSysId(strAppMenuSysId) == true)
	{
		Log('An application menu has been specified...');
		grAppMenu = GetRecord('sys_app_application',strAppMenuSysId);
		if (grAppMenu == false)
		{
			Log('Given application menu was not found!');
		}
	}
	else
	{
		Log('No application menu has been specified, checking if a menu exists already...');

		grAppMenu = new GlideRecord('sys_app_application');
		grAppMenu.addQuery('sys_scope','=',strAppSysId);
		grAppMenu.addQuery('device_type','=','browser');
		grAppMenu.addQuery('title','=',strAppName);
		grAppMenu.query();
		if (grAppMenu.next() == true)
		{
			Log('Application menu exists already.');
		}
		else
		{
			Log('No application menu exists.');
			grAppMenu = false;
		}
		
	}
	if (grAppMenu == false)
	{
		Log('Creating a new application menu...');
		grAppMenu = new GlideRecord('sys_app_application');
		grAppMenu.initialize();
		grAppMenu.active = true;
		grAppMenu.category = 'e0355b31ef303000a61d5a3615c0fb78'; // "Custom Applications"
		grAppMenu.device_type = 'browser';
		grAppMenu.hint = grApp.short_description;
		grAppMenu.description = grApp.short_description;
		grAppMenu.sys_scope = strAppSysId;
		grAppMenu.title = strAppName;
		GlideRecordInsert(grAppMenu);
	}
	
	/*
	if (IsValidRecord(grAppMenu))
	{
		Log('Adding application menu modules...');
			
	}
	*/
		
	
	
	
	Log('Done.');
	return grApp;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-07 15:15:09</sys_created_on>
        <sys_id>753cb10c1b6afc50577f43b5bb4bcb58</sys_id>
        <sys_mod_count>52</sys_mod_count>
        <sys_name>AppBuilder</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_753cb10c1b6afc50577f43b5bb4bcb58</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-11-18 09:51:52</sys_updated_on>
    </sys_script_include>
</record_update>
