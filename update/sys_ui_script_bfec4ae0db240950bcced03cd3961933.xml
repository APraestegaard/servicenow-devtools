<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>true</global>
        <name>x_snc_devtools.Format</name>
        <script><![CDATA[(function() {
	setTimeout(function()
	{
		
		function Log(strText)
		{
			console.log('DevToolsFormat UI Script: '+strText);
		}

		
		function FormatTableRow(elementRow,aColumns)
		{
			Log('FormatTableRow');
			var strRecordClass = ''+elementRow.getAttribute('record_class');
			var strSysId = ''+elementRow.getAttribute('sys_id');
			
			if (strRecordClass != '' && strSysId != '')
			{
				var ga = new GlideAjax('x_snc_devtools.DevToolsClientAPI');
				ga.addParam('sysparm_name','GetFormatConfig');
				ga.addParam('sysparm_table',strRecordClass);
				ga.addParam('sysparm_sys_id',strSysId);
				ga.getXML(Response_GetFormatConfig);
				function Response_GetFormatConfig(response)
				{
					Log('DevToolsClientAPI::GetFormatConfig RESPONSE...');
					var formatconfig = response.responseXML.documentElement.getAttribute('answer');
					if (formatconfig == 'false')
					{
						Log('Could not retrieve format config.');
						return;
					}
					try
					{
						formatconfig = JSON.parse(formatconfig);
					}
					catch (e)
					{
						Log('Could not parse format config.');
						return;
					}
					console.log(formatconfig);
					var aCells = elementRow.getElementsByTagName('td');
					for (var nCell = 0; nCell < aCells.length; nCell++)
					{
						elementCell = aCells[nCell];
						var strColumn = aColumns[nCell];
						var columnconfig = formatconfig[strColumn];
						if (columnconfig != null)
						{
							Log('Column: '+strColumn);
							console.log(columnconfig);
							element = elementCell;
							var strContent = element.textContent;
							if (strContent != '')
							{
								//Log('Old: '+strContent);
								var nDecimals = parseInt(columnconfig.decimals);
								var strPostFix = columnconfig.postfix;
								if (strPostFix == undefined)
								{
									strPostFix = '';
								}
								strContent = strContent.replaceAll(',','');
								var fValue = parseFloat(strContent);
								var strContentNew = fValue.toFixed(nDecimals) + strPostFix;
								Log('New: '+strContentNew);
								element.textContent = strContentNew;
							}
						}
					}
				}	
			}
		}
		
		function FormatTable(elementTable)
		{
			Log('FormatTable');
			var strTable = ''+elementTable.getAttribute('data-list_id');
			if (strTable != '')
			{
				var aTableHeader = elementTable.getElementsByTagName('thead');
				
				if (aTableHeader.length > 0)
				{
					var aColumns = [];

					var aRows = aTableHeader[0].getElementsByTagName('tr');
					for (var nRow = 0; nRow < aRows.length; nRow++)
					{
						elementRow = aRows[nRow];
						if (elementRow.id.indexOf('hdr_') == 0)
						{
							Log('Found the header row');
							var aCells = elementRow.getElementsByTagName('th');
							for (var nCell = 0; nCell < aCells.length; nCell++)
							{
								var elementCell = aCells[nCell];
								aColumns.push(''+elementCell.getAttribute('name'));
							}
						}
					}
					
					Log('Columns: ');
					console.log(aColumns);
					if (aColumns.length > 0)
					{
						Log('');
						var aTableBodies = elementTable.getElementsByTagName('tbody');
						if (aTableBodies.length > 0)
						{
							var aRows = aTableBodies[0].getElementsByTagName('tr');
							for (var nRow = 0; nRow < aRows.length; nRow++)
							{
								var elementRow = aRows[nRow];
								FormatTableRow(elementRow,aColumns)
							}
						}
						
						
					}
				}
				
				
			}
		}
	
		
		function FormatDocument(doc)
		{
			Log('FormatDocument: Iterating over iFrames');
			aFrames = doc.getElementsByTagName('iframe');
			console.log(aFrames);
			
			for (nFrame = 0; nFrame < aFrames.length; nFrame++)
			{
				var elementFrame = aFrames[nFrame];
				Log(elementFrame.getAttribute('id'));
				FormatDocument(elementFrame.contentWindow.document);
			}

			
			Log('FormatDocument: Iterating over tables');
			var aTables = doc.getElementsByTagName('table');
			console.log(aTables);
			for (var nTable = 0; nTable < aTables.length; nTable++)
			{
				var elementTable = aTables[nTable];
				FormatTable(elementTable);
			}
		}
	
		
		
		function Format()
		{
			Log('START');
			FormatDocument(top.document);
		}

		Format();
		
	}, 1000);
})();
]]></script>
        <script_name>Format</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-12-17 15:48:08</sys_created_on>
        <sys_id>bfec4ae0db240950bcced03cd3961933</sys_id>
        <sys_mod_count>50</sys_mod_count>
        <sys_name>x_snc_devtools.Format</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_ui_script_bfec4ae0db240950bcced03cd3961933</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-12-17 21:41:31</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
