<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.InstanceScanCheckOnRecord</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Performs an instance scan on a record using only a specific check.</description>
        <name>InstanceScanCheckOnRecord</name>
        <script><![CDATA[function InstanceScanCheckOnRecord(strCheckSysId, strTable, strRecordSysId, bDetailed)
{
	strCheckSysId = GetStringValue(strCheckSysId);
	strTable = GetStringValue(strTable);
	strRecordSysId = GetStringValue(strRecordSysId);
	
	if (IsValidSysId(strCheckSysId) == false)
	{
		return false;
	}
	if (IsValidTable(strTable) == false)
	{
		return false;
	}
	if (IsValidSysId(strRecordSysId) == false)
	{
		return false;
	}
	
	var strSuiteSysId = RecordQueryOrInsert('scan_check_suite', { name: 'DevTools.TEMP' }, { sys_scope: 'global' }, true);
	if (IsValidSysId(strSuiteSysId) == false)
	{
		return false;
	}
	
	var values = {
		suite: strSuiteSysId,
		check: strCheckSysId,
		sys_scope: 'global'
	}
	var strSuiteCheckSysId = RecordQueryOrInsert('scan_check_suite_check',values,values,true);
	if (IsValidSysId(strSuiteCheckSysId) == false)
	{
		RecordDelete('scan_check_suite',strSuiteSysId);
		return false;
	}
	
	var su = new sn_instance_scan.ScanUtil();
	var strComboSysId = su.getOrCreateComboFromSuiteAndTargets(strSuiteSysId, strTable, [strRecordSysId]);
	if (IsValidSysId(strComboSysId) == false)
	{
		RecordDelete('scan_check_suite_check',strSuiteCheckSysId);
		RecordDelete('scan_check_suite',strSuiteSysId);
		return false;
	}

	
	
	var si = new sn_instance_scan.ScanInstance();
	var strProgressSysId = '';
	try 
	{
		strProgressSysId = si.triggerScanFromCombo(strComboSysId);
	}
	catch (e)
	{
	}
	
	if (IsValidSysId(strProgressSysId) == false)
	{
		RecordDelete('scan_check_suite_check',strSuiteCheckSysId);
		RecordDelete('scan_check_suite',strSuiteSysId);
		return false;
	}
	
	var grProgress = new GlideRecord('sys_progress_worker');
	var bProgress = true;
	while (bProgress == true)
	{
		if (grProgress.get(strProgressSysId))
		{
			var strState = GetStringValue(grProgress.state);  
			if (strState != 'starting' && strState != 'running')
			{
				bProgress = false;
			}
		}
		else
		{
			bProgress = false;
		}
	}
	
	var grScanResult = new GlideRecord('scan_result');
	grScanResult.addQuery('progress_id','=',strProgressSysId);
	grScanResult.query();
	if (grScanResult.next() == false)
	{
		RecordDelete('scan_check_suite_check',strSuiteCheckSysId);
		RecordDelete('scan_check_suite',strSuiteSysId);
		return false;
	}
	
	var results = InstanceScanGetScanResults(grScanResult.sys_id,bDetailed);

	RecordDelete('scan_check_suite_check',strSuiteCheckSysId);
	RecordDelete('scan_check_suite',strSuiteSysId);
	
	return results;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-01 17:29:05</sys_created_on>
        <sys_id>d4077b701b6755105b76777d8b4bcb65</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>InstanceScanCheckOnRecord</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_d4077b701b6755105b76777d8b4bcb65</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-01 19:33:46</sys_updated_on>
    </sys_script_include>
</record_update>
