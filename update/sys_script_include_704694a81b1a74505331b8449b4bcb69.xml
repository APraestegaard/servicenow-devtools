<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.InstallerAPI</api_name>
        <caller_access>1</caller_access>
        <client_callable>false</client_callable>
        <description>The InstallerAPI class supports scripted installation steps as part of the installation of a scoped app. </description>
        <name>InstallerAPI</name>
        <script><![CDATA[var InstallerAPI = Class.create();
InstallerAPI.prototype = {
    initialize: function()
	{
		this.m_strLog = '\nInstallation BEGIN\n';
		this.m_bError = false;
		this.m_bAborting = false;
    },
	
	IsAborting: function()
	{
		return this.m_bAborting;
	},
	
	Log: function(strText)
	{
		this.m_strLog += strText + '\n';
	},
	
	Error: function(strText)
	{
		this.Log('ERROR: '+strText);
		this.m_bError = true;
	},

	FatalError: function(strText)
	{
		this.Log('FATAL ERROR: ABORTING INSTALLATION: '+strText);
		this.m_bError = true;
		this.m_bAborting = true;
	},
	
	
	Finish: function()
	{
		if (this.m_bError == false)
		{
			this.Log('Installation COMPLETED');
		}
		else
		{
			this.Log('Installation FAILED')
		}
		x_snc_devtools.Log(this.m_strLog);
	},
	
	GenericAction: function(vResult,strLogSuccess,strLogError)
	{
		if (vResult == false)
		{
			this.Error(strLogError);
		}
		else
		{
			this.Log(strLogSuccess);
			return vResult;
		}
		return vResult;
	},
	
	
	RecordInsertOrUpdate: function(strTopic,strTable,query,valuesInsert,valuesUpdate)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}		
		
		strTopic = GetStringValue(strTopic);
		
		strTable = GetStringValue(strTable);
		if (IsValidTable(strTable) == false)
		{
			this.Error(strTopic+': Table "'+strTable+'" does not exist.');
			return false;
		}
		if (IsObject(query) == false)
		{
			query = {};
		}
		if (IsObject(valuesInsert) == false)
		{
			valuesInsert = {};
		}
		if (IsObject(valuesUpdate) == false)
		{
			valuesUpdate = {};
		}
		var grRecord = new GlideRecord(strTable);
		GlideRecordAddQuery(grRecord,query);
		GlideRecordQuery(grRecord);
		if (grRecord.getRowCount() > 1)
		{
			this.Error(strTopic+': There is more than one record matching the specified query. Doing nothing!');
			return false;
		}
		if (grRecord.next())
		{
			if (GetKeys(valuesUpdate).length == 0)
			{
				this.Log(strTopic+': Record exists. Doing nothing!');
				return true;
			}
			else
			{
				GlideRecordSetValues(grRecord,valuesUpdate);
				GlideRecordUpdate(grRecord);
				var strSysId = GetStringValue(grRecord.sys_id);
				if (IsValidSysId(strSysId))
				{
					this.Log(strTopic+': Record has been updated!');
					return true;
				}
				else
				{
					this.Error(strTopic+': Record could not be updated!');
					return false;
				}
			}
		}

		var values = Merge(query,valuesInsert);
		values = Merge(values,valuesUpdate);

		grRecord.initialize();
		GlideRecordSetValues(grRecord,values);
		var strSysId = GlideRecordInsert(grRecord);
		if (IsValidSysId(strSysId) == false)
		{
			this.Error(strTopic+': Record could not be created!');
			return false;
		}
		this.Log(strTopic+': Record has been created.');
		return true;
	},
	
	
	CheckTableCrossScopeAccessibility: function(strTable)
	{
		strTable = GetStringValue(strTable);
		if (IsTableCrossScopeAccessible(strTable) == false)
		{
			this.FatalError(strTopic+': Table "'+strTable+'" is not configured to be cross scope accessible.');
			return false;
		}
		this.Log('Table "'+strTable+'" is configured to be cross scope accessible. Proceeding with installation.');
		return true;
	},
	
	SetProperty: function(strProperty, strValue)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		strProperty = GetStringValue(strProperty);
		strValue = GetStringValue(strValue);
		
		var strOldValue = GetStringValue(gs.getProperty(strProperty));
		if (strOldValue == strValue)
		{
			this.Log('System property '+strProperty+' is already set to "'+strValue+'". No action required.');
			return true;
		}
		
		if (SetProperty(strProperty,strValue,true) == true)
		{
			this.Log('System property '+strProperty+' has been set to "'+strValue+'".');
			return true;
		}
		else
		{
			this.Error('Failed to set system property '+strProperty+' to "'+strValue+'".');
			return false;
		}
	},
	
	SetTableAttribute: function(strTable,strAttributeName,strAttributeValue)
	{
		strTable = GetStringValue(strTable);
		strAttributeName = GetStringValue(strAttributeName);
		strAttributeValue = GetStringValue(strAttributeValue);
		var bResult = TableSetAttribute(strTable,strAttributeName,strAttributeValue);
		if (bResult == true)
		{
			this.Log('Table attribute "'+strAttributeName+'" of table "'+strTable+'" is set to "'+strAttributeValue+'".');
		}
		else
		{
			this.Error('Table attribute "'+strAttributeName+'" of table "'+strTable+'" is NOT set to "'+strAttributeValue+'"!');
		}
		return bResult;

	},
	
	DeleteView: function(strViewName)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		strViewName = GetStringValue(strViewName);
		
		var grView = new GlideRecord('sys_ui_view');
		grView.addQuery('name','=',GetStringValue(strViewName));
		grView.query();
		if (grView.getRowCount() == 0)
		{
			this.Log('View '+strViewName+' does not exist. No action required.');
			return true;
		}
		while (grView.next())
		{
			var bResult = RecordDelete('sys_ui_view',grView.sys_id);
			if (bResult == true)
			{
				this.Log('Deleted view: '+strViewName);
			}
			else
			{
				this.Error('Failed to delete view: '+strViewName);
				return false;
			}
		}
		return true;
	},	
	
		
	InstallGlobalSystemProperty: function(strName, strType, strDescription)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}

		var grSP = new GlideRecord('sys_properties');
		grSP.addQuery('name','=',GetStringValue(strName));
		grSP.query();
		if (grSP.next())
		{
			this.Log('Global system property '+strName+' already existst. No action required.');
			return grSP.getValue('sys_id');
		}

		var grSP = new GlideRecord('sys_properties');
		grSP.initialize();
		GlideRecordSetValue(grSP,'name',GetStringValue(strName));
		GlideRecordSetValue(grSP,'type',GetStringValue(strType));
		GlideRecordSetValue(grSP,'description',GetStringValue(strDescription));
		GlideRecordSetValue(grSP,'sys_scope','global');
		var strSysID = GlideRecordInsert(grSP);
		if (IsValidSysId(strSysID) == false)
		{
			this.Error('Failed to install global system property '+strName+'.');
			return false;
		}
		this.Log('Installed global system property '+strName+'.');
		return strSysID;
	},

	
	InstallSystemPropertyCategoryMapping: function(strSystemPropertyCategory, strSystemProperty, nOrder)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
	
		var grSPC = new GlideRecord('sys_properties_category');
		grSPC.addQuery('name','=',GetStringValue(strSystemPropertyCategory));
		grSPC.query();
		if (grSPC.next() == false)
		{
			this.Error('Failed to install system property category mapping. Category '+strSystemPropertyCategory+' does not exist.');
			return false;
		}
		var strSystemPropertyCategorySysId = grSPC.getValue('sys_id');

		var grSP = new GlideRecord('sys_properties');
		grSP.addQuery('name','=',GetStringValue(strSystemProperty));
		grSP.query();
		if (grSP.next() == false)
		{
			this.Error('Failed to install system property category mapping. System property '+strSystemProperty+' does not exist.');
			return false;
		}
		var strSystemPropertySysId = grSP.getValue('sys_id');


		var grSPCM2 = new GlideRecord('sys_properties_category_m2m');
		grSPCM2.addQuery('property','=',strSystemPropertySysId);
		grSPCM2.addQuery('category','=',strSystemPropertyCategorySysId);
		grSPCM2.query();
		if (grSPCM2.next())
		{
			this.Log('System property category mapping for property '+strSystemProperty+' to category '+strSystemPropertyCategory+' already exists. No action required.');
			return grSPCM2.getValue('sys_id');
		}	

		var grSPCM2 = new GlideRecord('sys_properties_category_m2m');
		grSPCM2.initialize();
		grSPCM2.category = strSystemPropertyCategorySysId;
		grSPCM2.property = strSystemPropertySysId;
		grSPCM2.order = nOrder;
		//grSPCM2.sys_scope = 'global';
		var strSysID = GetStringValue(GlideRecordInsert(grSPCM2));
		if (IsValidSysId(strSysID) == false)
		{
			this.Error('Failed to create system property category mapping for property '+strSystemProperty+' to category '+strSystemPropertyCategory+'.');
			return false;
		}
		this.Log('System property category mapping for property '+strSystemProperty+' to category '+strSystemPropertyCategory+' has been created.');
		return strSysID;
	},	
	
	ActivateBusinessRule: function(strSysId,bActive)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		bActive = GetBoolValue(bActive);		
		
		var grSS = new GlideRecord('sys_script');
		if (grSS.get(strSysId) == false)
		{
			this.Log('Business rule with sys_id "'+strSysId+'" does not exist. Doing nothing.');
			return false;
		}
		
		if (grSS.active == bActive)
		{
			this.Log('Business rule "'+grSS.name+'" is already set '+((bActive)?('active'):('inactive'))+'. No action required.');
			return strSysId;
		}
		grSS.active = bActive;
		var vResult = GlideRecordUpdate(grSS);
		if (vResult == false)
		{
			this.Error('Failed to set business rule "'+grSS.name+'" '+((bActive)?('active'):('inactive'))+'!');
			return false;
		}
		this.Log('Business rule "'+grSS.name+'" is set '+((bActive)?('active'):('inactive'))+'.');
		return strSysId;
	},
	
	ActivateClientScript: function(strSysId,bActive)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
	
		bActive = GetBoolValue(bActive);		
		
		var grSSC = new GlideRecord('sys_script_client');
		if (grSSC.get(strSysId) == false)
		{
			this.Log('Client script with sys_id "'+strSysId+'" does not exist. Doing nothing.');
			return false;
		}
		
		if (grSSC.active == bActive)
		{
			this.Log('Client script "'+grSSC.name+'" ('+grSSC.type+') is already set '+((bActive)?('active'):('inactive'))+'. No action required.');
			return strSysId;
		}
		grSSC.active = bActive;
		var vResult = GlideRecordUpdate(grSSC);
		if (vResult == false)
		{
			this.Error('Failed to set Client script "'+grSSC.name+'" ('+grSSC.type+') '+((bActive)?('active'):('inactive'))+'!');
			return false;
		}
		this.Log('Client script "'+grSSC.name+'" ('+grSSC.type+') is set '+((bActive)?('active'):('inactive'))+'.');
		return strSysId;		
		
		
	},	
	
	
	ActivateUiAction: function(strSysId,bActive)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
	
		bActive = GetBoolValue(bActive);		
		
		var grSUA = new GlideRecord('sys_ui_action');
		if (grSUA.get(strSysId) == false)
		{
			this.Log('UI Action with sys_id "'+strSysId+'" does not exist. Doing nothing.');
			return false;
		}
		
		if (grSUA.active == bActive)
		{
			this.Log('UI Action "'+grSUA.name+'" is already set '+((bActive)?('active'):('inactive'))+'. No action required.');
			return strSysId;
		}
		grSUA.active = bActive;
		var vResult = GlideRecordUpdate(grSUA);
		if (vResult == false)
		{
			this.Error('Failed to set UI Action "'+grSUA.name+'" '+((bActive)?('active'):('inactive'))+'!');
			return false;
		}
		this.Log('UI Action "'+grSUA.name+'" is set '+((bActive)?('active'):('inactive'))+'.');
		return strSysId;		
	},		

	ActivateUiPolicy: function(strSysId,bActive)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
	
		bActive = GetBoolValue(bActive);		
		
		var grSUP = new GlideRecord('sys_ui_policy');
		if (grSUP.get(strSysId) == false)
		{
			this.Log('UI Policy with sys_id "'+strSysId+'" does not exist. Doing nothing.');
			return false;
		}
		
		if (grSUP.active == bActive)
		{
			this.Log('UI Policy "'+grSUP.short_description+'" is already set '+((bActive)?('active'):('inactive'))+'. No action required.');
			return strSysId;
		}
		grSUP.active = bActive;
		var vResult = GlideRecordUpdate(grSUP);
		if (vResult == false)
		{
			this.Error('Failed to set UI Policy "'+grSUP.short_description+'" '+((bActive)?('active'):('inactive'))+'!');
			return false;
		}
		this.Log('UI Policy "'+grSUP.short_description+'" is set '+((bActive)?('active'):('inactive'))+'.');
		return strSysId;		
	},		
	
	
	ShowFieldClass: function(strName,bVisible)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		strName = GetStringValue(strName);
		bVisible = GetBoolValue(bVisible);		
		
		var grSGO = new GlideRecord('sys_glide_object');
		grSGO.addQuery('name','=',strName);
		grSGO.query();
		if (grSGO.next() == false)
		{
			this.Log('Field Class "'+strName+'" does not exist. Doing nothing.');
			return false;
		}
		
		if (grSGO.visible == bVisible)
		{
			this.Log('Field Class "'+grSGO.name+'" is already set '+((bVisible)?('visible'):('uninvisible'))+'. No action required.');
			return GetStringValue(grSGO.sys_id);
		}
		grSGO.visible = bVisible;
		var vResult = GlideRecordUpdate(grSGO);
		if (vResult == false)
		{
			this.Error('Failed to set Field Class "'+grSGO.name+'" '+((bVisible)?('visible'):('invisible'))+'!');
			return false;
		}
		this.Log('Field Class "'+grSGO.name+'" is set '+((bVisible)?('visible'):('invisible'))+'.');
		return GetStringValue(grSGO.sys_id);		
	},		
		
	
    type: 'InstallerAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-27 10:49:10</sys_created_on>
        <sys_id>704694a81b1a74505331b8449b4bcb69</sys_id>
        <sys_mod_count>45</sys_mod_count>
        <sys_name>InstallerAPI</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_704694a81b1a74505331b8449b4bcb69</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-03-29 18:39:17</sys_updated_on>
    </sys_script_include>
</record_update>
