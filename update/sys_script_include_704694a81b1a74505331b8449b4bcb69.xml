<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.InstallerAPI</api_name>
        <caller_access>1</caller_access>
        <client_callable>false</client_callable>
        <description>The InstallerAPI class supports scripted installation steps as part of the installation of a scoped app. </description>
        <name>InstallerAPI</name>
        <script><![CDATA[var InstallerAPI = Class.create();
InstallerAPI.prototype = {
    initialize: function()
	{
		this.m_strLog = '\nInstallation BEGIN\n';
		this.m_bError = false;
		this.m_bAborting = false;
    },
	
	IsAborting: function()
	{
		return this.m_bAborting;
	},
	
	Log: function(strText)
	{
		this.m_strLog += strText + '\n';
	},
	
	Error: function(strText)
	{
		this.Log('ERROR: '+strText);
		this.m_bError = true;
	},

	FatalError: function(strText)
	{
		this.Log('FATAL ERROR: ABORTING INSTALLATION: '+strText);
		this.m_bError = true;
		this.m_bAborting = true;
	},
	
	
	Finish: function()
	{
		if (this.m_bError == false)
		{
			this.Log('Installation COMPLETED');
		}
		else
		{
			this.Log('Installation FAILED')
		}
		x_snc_devtools.Log(this.m_strLog);
	},
	
	GenericAction: function(vResult,strLogSuccess,strLogError)
	{
		if (vResult == false)
		{
			this.Error(strLogError);
		}
		else
		{
			this.Log(strLogSuccess);
			return vResult;
		}
		return vResult;
	},
	
	CheckTableCrossScopeAccessibility: function(strTable)
	{
		strTable = GetStringValue(strTable);
		if (IsTableCrossScopeAccessible(strTable) == false)
		{
			this.FatalError('Table "'+strTable+'" is not configured to be cross scope accessible.');
			return false;
		}
		this.Log('Table "'+strTable+'" is configured to be cross scope accessible. Proceeding with installation.');
		return true;
	},
	
	SetProperty: function(strProperty, strValue)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		strProperty = GetStringValue(strProperty);
		strValue = GetStringValue(strValue);
		
		var strOldValue = GetStringValue(gs.getProperty(strProperty));
		if (strOldValue == strValue)
		{
			this.Log('System property '+strProperty+' is already set to "'+strValue+'". No action required.');
			return true;
		}
		
		if (SetProperty('glide.record.legacy_cross_scope_access_policy_in_script',strValue) == true)
		{
			this.Log('System property '+strProperty+' has been set to "'+strValue+'".');
			return true;
		}
		else
		{
			this.Error('Failed to set system property '+strProperty+' to "'+strValue+'".');
			return false;
		}
	},
		
	InstallGlobalSystemProperty: function(strName, strType, strDescription)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}

		var grSP = new GlideRecord('sys_properties');
		grSP.addQuery('name','=',GetStringValue(strName));
		grSP.query();
		if (grSP.next())
		{
			this.Log('Global system property '+strName+' already existst. No action required.');
			return grSP.getValue('sys_id');
		}

		var grSP = new GlideRecord('sys_properties');
		grSP.initialize();
		GlideRecordSetValue(grSP,'name',GetStringValue(strName));
		GlideRecordSetValue(grSP,'type',GetStringValue(strType));
		GlideRecordSetValue(grSP,'description',GetStringValue(strDescription));
		GlideRecordSetValue(grSP,'sys_scope','global');
		var strSysID = GlideRecordInsert(grSP);
		if (IsValidSysId(strSysID) == false)
		{
			this.Error('Failed to install global system property '+strName+'.');
			return false;
		}
		this.Log('Installed global system property '+strName+'.');
		return strSysID;
	},

	
	InstallSystemPropertyCategoryMapping: function(strSystemPropertyCategory, strSystemProperty, nOrder)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
	
		var grSPC = new GlideRecord('sys_properties_category');
		grSPC.addQuery('name','=',GetStringValue(strSystemPropertyCategory));
		grSPC.query();
		if (grSPC.next() == false)
		{
			this.Error('Failed to install system property category mapping. Category '+strSystemPropertyCategory+' does not exist.');
			return false;
		}
		var strSystemPropertyCategorySysId = grSPC.getValue('sys_id');

		var grSP = new GlideRecord('sys_properties');
		grSP.addQuery('name','=',GetStringValue(strSystemProperty));
		grSP.query();
		if (grSP.next() == false)
		{
			this.Error('Failed to install system property category mapping. System property '+strSystemProperty+' does not exist.');
			return false;
		}
		var strSystemPropertySysId = grSP.getValue('sys_id');


		var grSPCM2 = new GlideRecord('sys_properties_category_m2m');
		grSPCM2.addQuery('property','=',strSystemPropertySysId);
		grSPCM2.addQuery('category','=',strSystemPropertyCategorySysId);
		grSPCM2.query();
		if (grSPCM2.next())
		{
			this.Log('System property category mapping for property '+strSystemProperty+' to category '+strSystemPropertyCategory+' already exists. No action required.');
			return grSPCM2.getValue('sys_id');
		}	

		var grSPCM2 = new GlideRecord('sys_properties_category_m2m');
		grSPCM2.initialize();
		grSPCM2.category = strSystemPropertyCategorySysId;
		grSPCM2.property = strSystemPropertySysId;
		grSPCM2.order = nOrder;
		//grSPCM2.sys_scope = 'global';
		var strSysID = GetStringValue(GlideRecordInsert(grSPCM2));
		if (IsValidSysId(strSysID) == false)
		{
			this.Error('Failed to create system property category mapping for property '+strSystemProperty+' to category '+strSystemPropertyCategory+'.');
			return false;
		}
		this.Log('System property category mapping for property '+strSystemProperty+' to category '+strSystemPropertyCategory+' has been created.');
		return strSysID;
	},	
	
    type: 'InstallerAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-27 10:49:10</sys_created_on>
        <sys_id>704694a81b1a74505331b8449b4bcb69</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>InstallerAPI</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_704694a81b1a74505331b8449b4bcb69</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-30 13:39:04</sys_updated_on>
    </sys_script_include>
</record_update>
