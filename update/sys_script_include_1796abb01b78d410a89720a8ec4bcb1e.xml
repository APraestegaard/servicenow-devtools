<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.TestDataAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>TestDataAPI</name>
        <script><![CDATA[var TestDataAPI = Class.create();
TestDataAPI.prototype =
{
	initialize:function(strPrefix)
	{
		this.SetPrefix(strPrefix);
	},
	
	Log:function(strFunctionName, vValue)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;
		Debug('TestDataAPI.'+strFunctionName+'(): '+GetStringValue(vValue));
	},

	SetPrefix:function(strPrefix)
	{
		this.m_strPrefix = ''+strPrefix;
	},
	
	GetPrefix:function()
	{
		return this.m_strPrefix;
	},
	
	CreateUser:function(strName, aRoles)
	{
		var RenderValue = x_snc_devtools.RenderValue;
		this.Log('CreateUser',strName+' '+RenderValue(aRoles));
		strName = ''+strName;
		strPrefix = this.GetPrefix();
		if (Array.isArray(aRoles) == false)
		{
			aRoles = [];
		}
		var grUser = new GlideRecord('sys_user');
		var strUserSysId = null;
		var bDeleted = true;
		if (grUser.get('user_name',strPrefix+strName))
		{
			strUserSysId = grUser.getValue('sys_id');
			bDeleted = grUser.deleteRecord();
		}
		if (bDeleted == true || strUserSysId == null)
		{
			grUser.newRecord();
			grUser.user_name = strPrefix+strName;
			grUser.first_name = strPrefix+strName;
			strUserSysId = grUser.insert();
		}

		if (strUserSysId == null)
		{
			this.Log('CreateUser','Failed to create user '+strName+'!');
			return null;
		}
		this.Log('CreateUser','User '+strName+' has been created.');
		
		var grUserHasRole = new GlideRecord("sys_user_has_role");
		aRoles.forEach(function(strRole)
		{
			if (strRole != '')
			{
				var grUserRole = new GlideRecord('sys_user_role');
				grUserRole.addQuery('name','=',strRole);
				grUserRole.query();
				if (grUserRole.getRowCount() == 1)
				{
					if (grUserRole.next())
					{						
						grUserHasRole.initialize();
						grUserHasRole.role = grUserRole.sys_id;
						grUserHasRole.user = strUserSysId;
						grUserHasRole.insert();
					}
				}

			}
		});
		return strUserSysId;
	},
	
	CreateGroup:function(strName, aUserNames)
	{	
		var RenderValue = x_snc_devtools.RenderValue;
		this.Log('CreateGroup',strName+' '+RenderValue(aUserNames));
		strName = ''+strName;
		strPrefix = this.GetPrefix();
		if (Array.isArray(aUserNames) == false)
		{
			aUserNames = [];
		}
		var grGroupToDelete = new GlideRecord('sys_user_group');
		grGroupToDelete.addQuery('name','=',strPrefix+strName);
		grGroupToDelete.query();
		grGroupToDelete.deleteMultiple();

		var grGroup = new GlideRecord('sys_user_group');
		grGroup.newRecord();
		grGroup.name = strPrefix+strName;
		var strGroupSysId = grGroup.insert();

		if (strGroupSysId == null)
		{
			this.Log('CreateGroup','Failed to create group '+strName+'!');
			return null;
		}
		this.Log('CreateGroup','Group '+strName+' has been created.');		
		
		var grGroupMember = new GlideRecord('sys_user_grmember');
		aUserNames.forEach(function(strUserName)
		{
			if (strUserName != '')
			{
				var grUser = new GlideRecord("sys_user");
				if (grUser.get('user_name',strPrefix+strUserName))
				{						
					grGroupMember.initialize();
					grGroupMember.group = strGroupSysId;
					grGroupMember.user = grUser.sys_id;
					grGroupMember.insert();
				}

			}
		});
		return strGroupSysId;
	},
	
	
	CreateIncident:function(strName, strCallerUserName, strAssignmentGroupName)
	{
		this.Log('CreateIncident',strName+' '+strCallerUserName+' '+strAssignmentGroupName);		
		
		var strPrefix = this.GetPrefix(); 
		strName = ''+strName;
		strCallerUserName = ''+strCallerUserName;
		strAssignmentGroupName = ''+strAssignmentGroupName;


		var grIncidentToDelete = new GlideRecord('incident');
		grIncidentToDelete.addQuery('short_description','=',strPrefix+strName);
		grIncidentToDelete.query();
		grIncidentToDelete.deleteMultiple();

		var strCallerUserSysId = '';
		if (strCallerUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strCallerUserName))
			{
				strCallerUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord("sys_user_group");
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var grIncident = new GlideRecord('incident');
		grIncident.newRecord();
		grIncident.short_description = strPrefix+strName;
		grIncident.caller_id = strCallerUserSysId;
		grIncident.assignment_group = strAssignmentGroupSysId;
		var strIncidentSysId = grIncident.insert();
		
		if (strIncidentSysId == null)
		{
			this.Log('CreateIncident','Failed to create incident '+strName+'!');
			return null;
		}
		this.Log('CreateIncident','Incident '+strName+' has been created.');				
		return strIncidentSysId;
	},

	
	CreateIncidentTask:function(strParentName, strName, strOpenedByUserName, strAssignmentGroupName)
	{
		this.Log('CreateIncidentTask',strParentName+' '+strName+' '+strOpenedByUserName+' '+strAssignmentGroupName);		
		
		var strPrefix = this.GetPrefix(); 
		strParentName = ''+strParentName;
		strName = ''+strName;
		strOpenedByUserName = ''+strOpenedByUserName;
		strAssignmentGroupName = ''+strAssignmentGroupName;

		var strShortDescription = strPrefix+strParentName+'_'+strName;
		
		var grIncidentTaskToDelete = new GlideRecord('incident_task');
		grIncidentTaskToDelete.addQuery('short_description','=',strShortDescription);
		grIncidentTaskToDelete.query();
		grIncidentTaskToDelete.deleteMultiple();

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord('sys_user');
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord('sys_user_group');
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var strIncidentSysId = '';
		if (strParentName != '')
		{
			var grIncident = new GlideRecord('incident');
			if (grIncident.get('short_description',strPrefix+strParentName))
			{
				strIncidentSysId = grIncident.sys_id;
			}
		}	
		
		var grIncidentTask = new GlideRecord('incident_task');
		grIncidentTask.newRecord();
		grIncidentTask.incident = strIncidentSysId;
		grIncidentTask.short_description = strShortDescription;
		grIncidentTask.opened_by = strOpenedByUserSysId;
		grIncidentTask.assignment_group = strAssignmentGroupSysId;
		var strIncidentTaskSysId = grIncidentTask.insert();
		
		if (strIncidentTaskSysId == null)
		{
			this.Log('CreateIncidentTask','Failed to create incident task '+strName+'!');
			return null;
		}
		this.Log('CreateIncidentTask','Incident '+strName+' has been created.');				
		return strIncidentTaskSysId;
	},
	
	
	CreateChangeRequest:function(strName, strOpenedByUserName, strAssignmentGroupName)
	{
		this.Log('CreateChangeRequest',strName+' '+strOpenedByUserName+' '+strAssignmentGroupName);		
		
		var strPrefix = this.GetPrefix(); 
		strName = ''+strName;
		strOpenedByUserName = ''+strOpenedByUserName;
		strAssignmentGroupName = ''+strAssignmentGroupName;


		var grChangeRequestToDelete = new GlideRecord('change_request');
		grChangeRequestToDelete.addQuery('short_description','=',strPrefix+strName);
		grChangeRequestToDelete.query();
		grChangeRequestToDelete.deleteMultiple();

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord("sys_user_group");
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var grChangeRequest = new GlideRecord('change_request');
		grChangeRequest.newRecord();
		grChangeRequest.short_description = strPrefix+strName;
		grChangeRequest.opened_by = strOpenedByUserSysId;
		grChangeRequest.assignment_group = strAssignmentGroupSysId;
		var strChangeRequestSysId = grChangeRequest.insert();
		if (strChangeRequestSysId == null)
		{
			this.Log('CreateChangeRequest','Failed to create change request '+strChangeRequestSysId+'!');
			return null;
		}
		this.Log('CreateChangeRequest','Change request '+strName+' has been created.');			
		return strChangeRequestSysId;
	},
	
	CreateChangeTask:function(strParentName, strName, strOpenedByUserName, strAssignmentGroupName)
	{
		this.Log('CreateChangeTask',strParentName+' '+strName+' '+strOpenedByUserName+' '+strAssignmentGroupName);		
		
		var strPrefix = this.GetPrefix(); 
		strParentName = ''+strParentName;
		strName = ''+strName;
		strOpenedByUserName = ''+strOpenedByUserName;
		strAssignmentGroupName = ''+strAssignmentGroupName;

		var strShortDescription = strPrefix+strParentName+'_'+strName;
		
		var grChangeTaskToDelete = new GlideRecord('change_task');
		grChangeTaskToDelete.addQuery('short_description','=',strShortDescription);
		grChangeTaskToDelete.query();
		grChangeTaskToDelete.deleteMultiple();

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord('sys_user');
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord('sys_user_group');
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var strChangeRequestSysId = '';
		if (strParentName != '')
		{
			var grChangeRequest = new GlideRecord('change_request');
			if (grChangeRequest.get('short_description',strPrefix+strParentName))
			{
				strChangeRequestSysId = grChangeRequest.sys_id;
			}
		}	
		
		var grChangeTask = new GlideRecord('change_task');
		grChangeTask.newRecord();
		grChangeTask.change_request = strChangeRequestSysId;
		grChangeTask.short_description = strShortDescription;
		grChangeTask.opened_by = strOpenedByUserSysId;
		grChangeTask.assignment_group = strAssignmentGroupSysId;
		var strChangeTaskSysId = grChangeTask.insert();
		
		if (strChangeTaskSysId == null)
		{
			this.Log('CreateChangeTask','Failed to create change task '+strName+'!');
			return null;
		}
		this.Log('CreateChangeTask','Change task '+strName+' has been created.');				
		return strChangeTaskSysId;
	},
		

	
	type: 'TestDataAPI'
	
	
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-13 14:53:39</sys_created_on>
        <sys_id>1796abb01b78d410a89720a8ec4bcb1e</sys_id>
        <sys_mod_count>37</sys_mod_count>
        <sys_name>TestDataAPI</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_1796abb01b78d410a89720a8ec4bcb1e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-06-09 11:51:21</sys_updated_on>
    </sys_script_include>
</record_update>
