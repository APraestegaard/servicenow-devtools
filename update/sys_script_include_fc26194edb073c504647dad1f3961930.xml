<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_devtools.GetTableFromSysId</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Returns the table of the record identified by a given sys_id.</description>
        <name>GetTableFromSysId</name>
        <script><![CDATA[function GetTableFromSysId(strSysId)
{
	if (strSysId == 'global')
	{
		return 'sys_dictionary';
	}
	if (IsValidSysId(strSysId) == false)
	{
		return false;
	}
	
	var aPriorityTables = [
		'sys_metadata',
		'sys_package',
		'domain',
		'task',
		'sys_user',
		'sys_user_group',
		'cmdb_ci',
		'core_company',
		'alm_asset',
		'ast_contract',
		'sys_attachment'
	];
	
	for (var nTable = 0; nTable < aPriorityTables.length; nTable++)
	{
		var grRecord = GetRecord(aPriorityTables[nTable],strSysId,true);
		if (grRecord != false)
		{
			return GetStringValue(grRecord.getRecordClassName());
		}
	}
	

	var aRemainingTables = [];

	var grTables = new GlideRecord('sys_db_object');
	grTables.orderByDesc('name'); // to check tables with x_ and u_ first
	grTables.addQuery('extension_model'); // Only want tables that don't extend from anything
	grTables.addQuery('super_class','=',''); // No derived classes
	grTables.addEncodedQuery(
		'sys_update_nameISNOTEMPTY'
		+'^nameISNOTEMPTY'
		+'^nameNOT LIKEts_'
		+'^nameNOT LIKEpa_scores_'
		+'^nameNOT LIKEv_'
		+'^nameNOT LIKEm2m_'
		+'^nameNOT LIKE_m2m'
		+'^nameNOT LIKE_mtom'
		+'^nameNOT LIKE000'
		+'^nameNOT LIKEsn_hr_'
		+'^nameNOT LIKEsn_esign_'
		+'^nameNOT LIKEsn_doc_'
		);
	grTables.addQuery('name','!=','sys_rollback_incremental');
	grTables.addQuery('name','!=','sys_rollback_sequence');
	grTables.addQuery('name','!=','sn_templated_snip_note_template');
	grTables.addQuery('name','!=','sn_templated_snip_channel');
	for (var nPriorityTable = 0; nPriorityTable < aPriorityTables.length; nPriorityTable++)
	{
		grTables.addQuery('name','!=',aPriorityTables[nPriorityTable]);
	}
	GlideRecordQuery(grTables,true);
	while (grTables.next())
	{
		var strTable  = grTables.getValue('name');
		aRemainingTables.push(strTable);
	}

	for (var nTable = 0; nTable < aRemainingTables.length; nTable++)
	{
		var grRecord = GetRecord(aRemainingTables[nTable],strSysId,true);
		if (grRecord != false)
		{
			return GetStringValue(grRecord.getRecordClassName());
		}
	}	
	
	return false;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-10-08 14:07:48</sys_created_on>
        <sys_id>fc26194edb073c504647dad1f3961930</sys_id>
        <sys_mod_count>55</sys_mod_count>
        <sys_name>GetTableFromSysId</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_fc26194edb073c504647dad1f3961930</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-03-18 20:48:47</sys_updated_on>
    </sys_script_include>
</record_update>
